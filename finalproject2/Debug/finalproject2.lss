
finalproject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00001f86  0000201a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800174  00800174  0000212e  2**0
                  ALLOC
  3 .stab         000021fc  00000000  00000000  00002130  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000120d  00000000  00000000  0000432c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005539  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00005699  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000584f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000775c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000882e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009860  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  000099e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00009cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a5bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 0b 	call	0x1754	; 0x1754 <main>
      8a:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__fixsfsi+0x80>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__fixsfsi+0x80>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__fixsfsi+0x8a>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__fixsfsi+0x94>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__fixsfsi+0x80>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__fixsfsi+0x8a>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__fixsfsi+0x94>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__fixsfsi+0x9c>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__fixsfsi+0x9c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__fixsfsi+0x9c>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <buzzer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void buzzer_init(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID,PIN3_ID,PIN_OUTPUT);
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	63 e0       	ldi	r22, 0x03	; 3
     d7a:	41 e0       	ldi	r20, 0x01	; 1
     d7c:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID,PIN3_ID,LOGIC_LOW);
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	63 e0       	ldi	r22, 0x03	; 3
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <buzzer_on>:

void buzzer_on(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID,PIN3_ID,LOGIC_HIGH);
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	63 e0       	ldi	r22, 0x03	; 3
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <buzzer_off>:


void buzzer_off(void)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID,PIN3_ID,LOGIC_LOW);
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	63 e0       	ldi	r22, 0x03	; 3
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <EEPROM_writeByte+0x6>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <EEPROM_writeByte+0x8>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     dd2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <TWI_start>
    if (TWI_getStatus() != TWI_START)
     dd6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     dda:	88 30       	cpi	r24, 0x08	; 8
     ddc:	11 f0       	breq	.+4      	; 0xde2 <EEPROM_writeByte+0x22>
        return ERROR;
     dde:	1c 82       	std	Y+4, r1	; 0x04
     de0:	28 c0       	rjmp	.+80     	; 0xe32 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	80 70       	andi	r24, 0x00	; 0
     de8:	97 70       	andi	r25, 0x07	; 7
     dea:	88 0f       	add	r24, r24
     dec:	89 2f       	mov	r24, r25
     dee:	88 1f       	adc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	91 95       	neg	r25
     df4:	80 6a       	ori	r24, 0xA0	; 160
     df6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     dfa:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     dfe:	88 31       	cpi	r24, 0x18	; 24
     e00:	11 f0       	breq	.+4      	; 0xe06 <EEPROM_writeByte+0x46>
        return ERROR; 
     e02:	1c 82       	std	Y+4, r1	; 0x04
     e04:	16 c0       	rjmp	.+44     	; 0xe32 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e0c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     e10:	88 32       	cpi	r24, 0x28	; 40
     e12:	11 f0       	breq	.+4      	; 0xe18 <EEPROM_writeByte+0x58>
        return ERROR;
     e14:	1c 82       	std	Y+4, r1	; 0x04
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e1e:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     e22:	88 32       	cpi	r24, 0x28	; 40
     e24:	11 f0       	breq	.+4      	; 0xe2a <EEPROM_writeByte+0x6a>
        return ERROR;
     e26:	1c 82       	std	Y+4, r1	; 0x04
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     e2a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <TWI_stop>
	
    return SUCCESS;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	8c 83       	std	Y+4, r24	; 0x04
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <EEPROM_readByte+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <EEPROM_readByte+0x8>
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	7c 83       	std	Y+4, r23	; 0x04
     e56:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     e58:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <TWI_start>
    if (TWI_getStatus() != TWI_START)
     e5c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     e60:	88 30       	cpi	r24, 0x08	; 8
     e62:	11 f0       	breq	.+4      	; 0xe68 <EEPROM_readByte+0x26>
        return ERROR;
     e64:	1d 82       	std	Y+5, r1	; 0x05
     e66:	44 c0       	rjmp	.+136    	; 0xef0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	80 70       	andi	r24, 0x00	; 0
     e6e:	97 70       	andi	r25, 0x07	; 7
     e70:	88 0f       	add	r24, r24
     e72:	89 2f       	mov	r24, r25
     e74:	88 1f       	adc	r24, r24
     e76:	99 0b       	sbc	r25, r25
     e78:	91 95       	neg	r25
     e7a:	80 6a       	ori	r24, 0xA0	; 160
     e7c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e80:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     e84:	88 31       	cpi	r24, 0x18	; 24
     e86:	11 f0       	breq	.+4      	; 0xe8c <EEPROM_readByte+0x4a>
        return ERROR;
     e88:	1d 82       	std	Y+5, r1	; 0x05
     e8a:	32 c0       	rjmp	.+100    	; 0xef0 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e92:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     e96:	88 32       	cpi	r24, 0x28	; 40
     e98:	11 f0       	breq	.+4      	; 0xe9e <EEPROM_readByte+0x5c>
        return ERROR;
     e9a:	1d 82       	std	Y+5, r1	; 0x05
     e9c:	29 c0       	rjmp	.+82     	; 0xef0 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     e9e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     ea2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     ea6:	80 31       	cpi	r24, 0x10	; 16
     ea8:	11 f0       	breq	.+4      	; 0xeae <EEPROM_readByte+0x6c>
        return ERROR;
     eaa:	1d 82       	std	Y+5, r1	; 0x05
     eac:	21 c0       	rjmp	.+66     	; 0xef0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	80 70       	andi	r24, 0x00	; 0
     eb4:	97 70       	andi	r25, 0x07	; 7
     eb6:	88 0f       	add	r24, r24
     eb8:	89 2f       	mov	r24, r25
     eba:	88 1f       	adc	r24, r24
     ebc:	99 0b       	sbc	r25, r25
     ebe:	91 95       	neg	r25
     ec0:	81 6a       	ori	r24, 0xA1	; 161
     ec2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     ec6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     eca:	80 34       	cpi	r24, 0x40	; 64
     ecc:	11 f0       	breq	.+4      	; 0xed2 <EEPROM_readByte+0x90>
        return ERROR;
     ece:	1d 82       	std	Y+5, r1	; 0x05
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     ed2:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <TWI_readByteWithNACK>
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     edc:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_getStatus>
     ee0:	88 35       	cpi	r24, 0x58	; 88
     ee2:	11 f0       	breq	.+4      	; 0xee8 <EEPROM_readByte+0xa6>
        return ERROR;
     ee4:	1d 82       	std	Y+5, r1	; 0x05
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     ee8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <TWI_stop>

    return SUCCESS;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	8d 83       	std	Y+5, r24	; 0x05
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <GPIO_setupPinDirection+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <GPIO_setupPinDirection+0x8>
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	6a 83       	std	Y+2, r22	; 0x02
     f14:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	88 30       	cpi	r24, 0x08	; 8
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <GPIO_setupPinDirection+0x1c>
     f1c:	d5 c0       	rjmp	.+426    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	08 f0       	brcs	.+2      	; 0xf26 <GPIO_setupPinDirection+0x24>
     f24:	d1 c0       	rjmp	.+418    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3d 83       	std	Y+5, r19	; 0x05
     f2e:	2c 83       	std	Y+4, r18	; 0x04
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	09 f4       	brne	.+2      	; 0xf3c <GPIO_setupPinDirection+0x3a>
     f3a:	43 c0       	rjmp	.+134    	; 0xfc2 <GPIO_setupPinDirection+0xc0>
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	3d 81       	ldd	r19, Y+5	; 0x05
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	2c f4       	brge	.+10     	; 0xf50 <GPIO_setupPinDirection+0x4e>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	71 f0       	breq	.+28     	; 0xf6a <GPIO_setupPinDirection+0x68>
     f4e:	bc c0       	rjmp	.+376    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
     f50:	2c 81       	ldd	r18, Y+4	; 0x04
     f52:	3d 81       	ldd	r19, Y+5	; 0x05
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <GPIO_setupPinDirection+0x5a>
     f5a:	5f c0       	rjmp	.+190    	; 0x101a <GPIO_setupPinDirection+0x118>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <GPIO_setupPinDirection+0x66>
     f66:	85 c0       	rjmp	.+266    	; 0x1072 <GPIO_setupPinDirection+0x170>
     f68:	af c0       	rjmp	.+350    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f70:	aa e3       	ldi	r26, 0x3A	; 58
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ea e3       	ldi	r30, 0x3A	; 58
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_setupPinDirection+0x8c>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_setupPinDirection+0x88>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	98 c0       	rjmp	.+304    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f98:	aa e3       	ldi	r26, 0x3A	; 58
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ea e3       	ldi	r30, 0x3A	; 58
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <GPIO_setupPinDirection+0xb4>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <GPIO_setupPinDirection+0xb0>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	83 c0       	rjmp	.+262    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fc8:	a7 e3       	ldi	r26, 0x37	; 55
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e7 e3       	ldi	r30, 0x37	; 55
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_setupPinDirection+0xe4>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_setupPinDirection+0xe0>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	6c c0       	rjmp	.+216    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ff0:	a7 e3       	ldi	r26, 0x37	; 55
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e7 e3       	ldi	r30, 0x37	; 55
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_setupPinDirection+0x10c>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_setupPinDirection+0x108>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	57 c0       	rjmp	.+174    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	a1 f4       	brne	.+40     	; 0x1048 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1020:	a4 e3       	ldi	r26, 0x34	; 52
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e4 e3       	ldi	r30, 0x34	; 52
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_setupPinDirection+0x13c>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_setupPinDirection+0x138>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	40 c0       	rjmp	.+128    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1048:	a4 e3       	ldi	r26, 0x34	; 52
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e4 e3       	ldi	r30, 0x34	; 52
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GPIO_setupPinDirection+0x164>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <GPIO_setupPinDirection+0x160>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	2b c0       	rjmp	.+86     	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	a1 f4       	brne	.+40     	; 0x10a0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1078:	a1 e3       	ldi	r26, 0x31	; 49
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e1 e3       	ldi	r30, 0x31	; 49
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_setupPinDirection+0x194>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_setupPinDirection+0x190>
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10a0:	a1 e3       	ldi	r26, 0x31	; 49
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e1 e3       	ldi	r30, 0x31	; 49
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_setupPinDirection+0x1bc>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_setupPinDirection+0x1b8>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <GPIO_writePin+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <GPIO_writePin+0x8>
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6a 83       	std	Y+2, r22	; 0x02
    10ea:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <GPIO_writePin+0x1c>
    10f2:	d5 c0       	rjmp	.+426    	; 0x129e <GPIO_writePin+0x1c6>
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	84 30       	cpi	r24, 0x04	; 4
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <GPIO_writePin+0x24>
    10fa:	d1 c0       	rjmp	.+418    	; 0x129e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3d 83       	std	Y+5, r19	; 0x05
    1104:	2c 83       	std	Y+4, r18	; 0x04
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <GPIO_writePin+0x3a>
    1110:	43 c0       	rjmp	.+134    	; 0x1198 <GPIO_writePin+0xc0>
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	2c f4       	brge	.+10     	; 0x1126 <GPIO_writePin+0x4e>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	71 f0       	breq	.+28     	; 0x1140 <GPIO_writePin+0x68>
    1124:	bc c0       	rjmp	.+376    	; 0x129e <GPIO_writePin+0x1c6>
    1126:	2c 81       	ldd	r18, Y+4	; 0x04
    1128:	3d 81       	ldd	r19, Y+5	; 0x05
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <GPIO_writePin+0x5a>
    1130:	5f c0       	rjmp	.+190    	; 0x11f0 <GPIO_writePin+0x118>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <GPIO_writePin+0x66>
    113c:	85 c0       	rjmp	.+266    	; 0x1248 <GPIO_writePin+0x170>
    113e:	af c0       	rjmp	.+350    	; 0x129e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	a1 f4       	brne	.+40     	; 0x116e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1146:	ab e3       	ldi	r26, 0x3B	; 59
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	eb e3       	ldi	r30, 0x3B	; 59
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_writePin+0x8c>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_writePin+0x88>
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	98 c0       	rjmp	.+304    	; 0x129e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    116e:	ab e3       	ldi	r26, 0x3B	; 59
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	eb e3       	ldi	r30, 0x3B	; 59
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <GPIO_writePin+0xb4>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <GPIO_writePin+0xb0>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	83 c0       	rjmp	.+262    	; 0x129e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    119e:	a8 e3       	ldi	r26, 0x38	; 56
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e8 e3       	ldi	r30, 0x38	; 56
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_writePin+0xe4>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_writePin+0xe0>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	6c c0       	rjmp	.+216    	; 0x129e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11c6:	a8 e3       	ldi	r26, 0x38	; 56
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e8 e3       	ldi	r30, 0x38	; 56
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_writePin+0x10c>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_writePin+0x108>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	57 c0       	rjmp	.+174    	; 0x129e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	a1 f4       	brne	.+40     	; 0x121e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11f6:	a5 e3       	ldi	r26, 0x35	; 53
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_writePin+0x13c>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_writePin+0x138>
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	40 c0       	rjmp	.+128    	; 0x129e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    121e:	a5 e3       	ldi	r26, 0x35	; 53
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e3       	ldi	r30, 0x35	; 53
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <GPIO_writePin+0x164>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <GPIO_writePin+0x160>
    1240:	80 95       	com	r24
    1242:	84 23       	and	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	2b c0       	rjmp	.+86     	; 0x129e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	a1 f4       	brne	.+40     	; 0x1276 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_writePin+0x194>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_writePin+0x190>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	14 c0       	rjmp	.+40     	; 0x129e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1276:	a2 e3       	ldi	r26, 0x32	; 50
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e2 e3       	ldi	r30, 0x32	; 50
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GPIO_writePin+0x1bc>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <GPIO_writePin+0x1b8>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <GPIO_readPin+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <GPIO_readPin+0x8>
    12b6:	0f 92       	push	r0
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	8a 83       	std	Y+2, r24	; 0x02
    12be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12c0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	88 30       	cpi	r24, 0x08	; 8
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <GPIO_readPin+0x1c>
    12c8:	84 c0       	rjmp	.+264    	; 0x13d2 <GPIO_readPin+0x124>
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	84 30       	cpi	r24, 0x04	; 4
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <GPIO_readPin+0x24>
    12d0:	80 c0       	rjmp	.+256    	; 0x13d2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3d 83       	std	Y+5, r19	; 0x05
    12da:	2c 83       	std	Y+4, r18	; 0x04
    12dc:	4c 81       	ldd	r20, Y+4	; 0x04
    12de:	5d 81       	ldd	r21, Y+5	; 0x05
    12e0:	41 30       	cpi	r20, 0x01	; 1
    12e2:	51 05       	cpc	r21, r1
    12e4:	79 f1       	breq	.+94     	; 0x1344 <GPIO_readPin+0x96>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	91 05       	cpc	r25, r1
    12ee:	34 f4       	brge	.+12     	; 0x12fc <GPIO_readPin+0x4e>
    12f0:	2c 81       	ldd	r18, Y+4	; 0x04
    12f2:	3d 81       	ldd	r19, Y+5	; 0x05
    12f4:	21 15       	cp	r18, r1
    12f6:	31 05       	cpc	r19, r1
    12f8:	69 f0       	breq	.+26     	; 0x1314 <GPIO_readPin+0x66>
    12fa:	6b c0       	rjmp	.+214    	; 0x13d2 <GPIO_readPin+0x124>
    12fc:	4c 81       	ldd	r20, Y+4	; 0x04
    12fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1300:	42 30       	cpi	r20, 0x02	; 2
    1302:	51 05       	cpc	r21, r1
    1304:	b9 f1       	breq	.+110    	; 0x1374 <GPIO_readPin+0xc6>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	91 05       	cpc	r25, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <GPIO_readPin+0x64>
    1310:	49 c0       	rjmp	.+146    	; 0x13a4 <GPIO_readPin+0xf6>
    1312:	5f c0       	rjmp	.+190    	; 0x13d2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1314:	e9 e3       	ldi	r30, 0x39	; 57
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_readPin+0x7e>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_readPin+0x7a>
    1330:	ca 01       	movw	r24, r20
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	90 70       	andi	r25, 0x00	; 0
    1336:	88 23       	and	r24, r24
    1338:	19 f0       	breq	.+6      	; 0x1340 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	49 c0       	rjmp	.+146    	; 0x13d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	47 c0       	rjmp	.+142    	; 0x13d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1344:	e6 e3       	ldi	r30, 0x36	; 54
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <GPIO_readPin+0xae>
    1358:	55 95       	asr	r21
    135a:	47 95       	ror	r20
    135c:	8a 95       	dec	r24
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <GPIO_readPin+0xaa>
    1360:	ca 01       	movw	r24, r20
    1362:	81 70       	andi	r24, 0x01	; 1
    1364:	90 70       	andi	r25, 0x00	; 0
    1366:	88 23       	and	r24, r24
    1368:	19 f0       	breq	.+6      	; 0x1370 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	31 c0       	rjmp	.+98     	; 0x13d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1370:	19 82       	std	Y+1, r1	; 0x01
    1372:	2f c0       	rjmp	.+94     	; 0x13d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1374:	e3 e3       	ldi	r30, 0x33	; 51
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <GPIO_readPin+0xde>
    1388:	55 95       	asr	r21
    138a:	47 95       	ror	r20
    138c:	8a 95       	dec	r24
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <GPIO_readPin+0xda>
    1390:	ca 01       	movw	r24, r20
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	90 70       	andi	r25, 0x00	; 0
    1396:	88 23       	and	r24, r24
    1398:	19 f0       	breq	.+6      	; 0x13a0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	19 c0       	rjmp	.+50     	; 0x13d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13a0:	19 82       	std	Y+1, r1	; 0x01
    13a2:	17 c0       	rjmp	.+46     	; 0x13d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13a4:	e0 e3       	ldi	r30, 0x30	; 48
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_readPin+0x10e>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_readPin+0x10a>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	90 70       	andi	r25, 0x00	; 0
    13c6:	88 23       	and	r24, r24
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13d0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <GPIO_setupPortDirection+0x6>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <GPIO_setupPortDirection+0x8>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	90 f5       	brcc	.+100    	; 0x145e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3c 83       	std	Y+4, r19	; 0x04
    1402:	2b 83       	std	Y+3, r18	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	d1 f0       	breq	.+52     	; 0x1442 <GPIO_setupPortDirection+0x5e>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	2c f4       	brge	.+10     	; 0x1422 <GPIO_setupPortDirection+0x3e>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	61 f0       	breq	.+24     	; 0x1438 <GPIO_setupPortDirection+0x54>
    1420:	1e c0       	rjmp	.+60     	; 0x145e <GPIO_setupPortDirection+0x7a>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	81 f0       	breq	.+32     	; 0x144c <GPIO_setupPortDirection+0x68>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	83 30       	cpi	r24, 0x03	; 3
    1432:	91 05       	cpc	r25, r1
    1434:	81 f0       	breq	.+32     	; 0x1456 <GPIO_setupPortDirection+0x72>
    1436:	13 c0       	rjmp	.+38     	; 0x145e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1438:	ea e3       	ldi	r30, 0x3A	; 58
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	80 83       	st	Z, r24
    1440:	0e c0       	rjmp	.+28     	; 0x145e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1442:	e7 e3       	ldi	r30, 0x37	; 55
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	80 83       	st	Z, r24
    144a:	09 c0       	rjmp	.+18     	; 0x145e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    144c:	e4 e3       	ldi	r30, 0x34	; 52
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	80 83       	st	Z, r24
    1454:	04 c0       	rjmp	.+8      	; 0x145e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1456:	e1 e3       	ldi	r30, 0x31	; 49
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	80 83       	st	Z, r24
			break;
		}
	}
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_writePort+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_writePort+0x8>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	84 30       	cpi	r24, 0x04	; 4
    1480:	90 f5       	brcc	.+100    	; 0x14e6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3c 83       	std	Y+4, r19	; 0x04
    148a:	2b 83       	std	Y+3, r18	; 0x03
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	d1 f0       	breq	.+52     	; 0x14ca <GPIO_writePort+0x5e>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	2c f4       	brge	.+10     	; 0x14aa <GPIO_writePort+0x3e>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <GPIO_writePort+0x54>
    14a8:	1e c0       	rjmp	.+60     	; 0x14e6 <GPIO_writePort+0x7a>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	81 f0       	breq	.+32     	; 0x14d4 <GPIO_writePort+0x68>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	91 05       	cpc	r25, r1
    14bc:	81 f0       	breq	.+32     	; 0x14de <GPIO_writePort+0x72>
    14be:	13 c0       	rjmp	.+38     	; 0x14e6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14c0:	eb e3       	ldi	r30, 0x3B	; 59
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	80 83       	st	Z, r24
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14ca:	e8 e3       	ldi	r30, 0x38	; 56
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	80 83       	st	Z, r24
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14d4:	e5 e3       	ldi	r30, 0x35	; 53
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	80 83       	st	Z, r24
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14de:	e2 e3       	ldi	r30, 0x32	; 50
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	80 83       	st	Z, r24
			break;
		}
	}
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_readPort+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <GPIO_readPort+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1502:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	90 f5       	brcc	.+100    	; 0x156e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3c 83       	std	Y+4, r19	; 0x04
    1512:	2b 83       	std	Y+3, r18	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	d1 f0       	breq	.+52     	; 0x1552 <GPIO_readPort+0x5e>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	2c f4       	brge	.+10     	; 0x1532 <GPIO_readPort+0x3e>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	61 f0       	breq	.+24     	; 0x1548 <GPIO_readPort+0x54>
    1530:	1e c0       	rjmp	.+60     	; 0x156e <GPIO_readPort+0x7a>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <GPIO_readPort+0x68>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <GPIO_readPort+0x72>
    1546:	13 c0       	rjmp	.+38     	; 0x156e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1548:	e9 e3       	ldi	r30, 0x39	; 57
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	0e c0       	rjmp	.+28     	; 0x156e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1552:	e6 e3       	ldi	r30, 0x36	; 54
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	09 c0       	rjmp	.+18     	; 0x156e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    155c:	e3 e3       	ldi	r30, 0x33	; 51
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	04 c0       	rjmp	.+8      	; 0x156e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1566:	e0 e3       	ldi	r30, 0x30	; 48
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <d>:

/*******************************************************************************
 *                                 functions                                    *
 *******************************************************************************/

void d(){
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1586:	80 91 74 01 	lds	r24, 0x0174
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	80 93 74 01 	sts	0x0174, r24
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <delay_timer0_normal_mode>:
void delay_timer0_normal_mode(uint32 quarter)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	28 97       	sbiw	r28, 0x08	; 8
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	6d 83       	std	Y+5, r22	; 0x05
    15ac:	7e 83       	std	Y+6, r23	; 0x06
    15ae:	8f 83       	std	Y+7, r24	; 0x07
    15b0:	98 87       	std	Y+8, r25	; 0x08
SetCallBack(d);
    15b2:	8f eb       	ldi	r24, 0xBF	; 191
    15b4:	9a e0       	ldi	r25, 0x0A	; 10
    15b6:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <SetCallBack>

	/* Initialize the TIMER0 driver */
config ptr={0,OVER,CLK_1024,INTERRUPT};
    15ba:	19 82       	std	Y+1, r1	; 0x01
    15bc:	1a 82       	std	Y+2, r1	; 0x02
    15be:	85 e0       	ldi	r24, 0x05	; 5
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    15c2:	1c 82       	std	Y+4, r1	; 0x04
	Timer0_init(&ptr);
    15c4:	ce 01       	movw	r24, r28
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <Timer0_init>
while(quarter != tick);
    15cc:	80 91 74 01 	lds	r24, 0x0174
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	af 81       	ldd	r26, Y+7	; 0x07
    15de:	b8 85       	ldd	r27, Y+8	; 0x08
    15e0:	28 17       	cp	r18, r24
    15e2:	39 07       	cpc	r19, r25
    15e4:	4a 07       	cpc	r20, r26
    15e6:	5b 07       	cpc	r21, r27
    15e8:	89 f7       	brne	.-30     	; 0x15cc <delay_timer0_normal_mode+0x36>
tick=0;
    15ea:	10 92 74 01 	sts	0x0174, r1
DeInit();
    15ee:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <DeInit>
}
    15f2:	28 96       	adiw	r28, 0x08	; 8
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <recieve_the_pass>:
/**************************************************************
 * description:this function is responsible for putting the password in array
 */
void recieve_the_pass(uint8 * x)
{
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <recieve_the_pass+0xa>
    160e:	0f 92       	push	r0
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	9b 83       	std	Y+3, r25	; 0x03
    1616:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1618:	19 82       	std	Y+1, r1	; 0x01
		for(i=0;i<4;i++)
    161a:	19 82       	std	Y+1, r1	; 0x01
    161c:	15 c0       	rjmp	.+42     	; 0x1648 <recieve_the_pass+0x44>
		{
		x[i]=UART_recieveByte();
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	8c 01       	movw	r16, r24
    162a:	02 0f       	add	r16, r18
    162c:	13 1f       	adc	r17, r19
    162e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <UART_recieveByte>
    1632:	f8 01       	movw	r30, r16
    1634:	80 83       	st	Z, r24
		delay_timer0_normal_mode(1);
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_timer0_normal_mode>
 * description:this function is responsible for putting the password in array
 */
void recieve_the_pass(uint8 * x)
{
	uint8 i=0;
		for(i=0;i<4;i++)
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	8f 5f       	subi	r24, 0xFF	; 255
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	40 f3       	brcs	.-48     	; 0x161e <recieve_the_pass+0x1a>
		delay_timer0_normal_mode(1);
		}
		/**************************************************************
		 * description:this function is responsible for putting the new password in the eeprom
		 */
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	08 95       	ret

0000165e <put_in_eeprom>:
void put_in_eeprom(uint8 * x)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <put_in_eeprom+0x6>
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9b 83       	std	Y+3, r25	; 0x03
    166c:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0;i<4;i++)
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	1a c0       	rjmp	.+52     	; 0x16a6 <put_in_eeprom+0x48>
		{
			EEPROM_writeByte(0x0311+i, eeprom[i]); /* Write the password in the external EEPROM */
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	8f 5e       	subi	r24, 0xEF	; 239
    167a:	9c 4f       	sbci	r25, 0xFC	; 252
    167c:	ac 01       	movw	r20, r24
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	fc 01       	movw	r30, r24
    1686:	e8 58       	subi	r30, 0x88	; 136
    1688:	fe 4f       	sbci	r31, 0xFE	; 254
    168a:	20 81       	ld	r18, Z
    168c:	ca 01       	movw	r24, r20
    168e:	62 2f       	mov	r22, r18
    1690:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <EEPROM_writeByte>
			delay_timer0_normal_mode(1);
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_timer0_normal_mode>
		 * description:this function is responsible for putting the new password in the eeprom
		 */
}
void put_in_eeprom(uint8 * x)
{
	for(uint8 i=0;i<4;i++)
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	84 30       	cpi	r24, 0x04	; 4
    16aa:	18 f3       	brcs	.-58     	; 0x1672 <put_in_eeprom+0x14>
		{
			EEPROM_writeByte(0x0311+i, eeprom[i]); /* Write the password in the external EEPROM */
			delay_timer0_normal_mode(1);
		}
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <check>:
/**************************************************************
 * description:this function is responsible for checkin the passwords
 */
void check(void)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	0f 92       	push	r0
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	recieve_the_pass(check1);
    16c2:	84 e8       	ldi	r24, 0x84	; 132
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	0e 94 02 0b 	call	0x1604	; 0x1604 <recieve_the_pass>
	for(i=0;i<4;i++)
    16ca:	19 82       	std	Y+1, r1	; 0x01
    16cc:	19 c0       	rjmp	.+50     	; 0x1700 <check+0x48>
{
	EEPROM_readByte(0x0311+i, &(eepromread[i])); /* read the password form the external EEPROM */
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	8f 5e       	subi	r24, 0xEF	; 239
    16d6:	9c 4f       	sbci	r25, 0xFC	; 252
    16d8:	ac 01       	movw	r20, r24
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9c 01       	movw	r18, r24
    16e2:	24 58       	subi	r18, 0x84	; 132
    16e4:	3e 4f       	sbci	r19, 0xFE	; 254
    16e6:	ca 01       	movw	r24, r20
    16e8:	b9 01       	movw	r22, r18
    16ea:	0e 94 21 07 	call	0xe42	; 0xe42 <EEPROM_readByte>
	delay_timer0_normal_mode(1);
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_timer0_normal_mode>
 */
void check(void)
{
	uint8 i;
	recieve_the_pass(check1);
	for(i=0;i<4;i++)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	8f 5f       	subi	r24, 0xFF	; 255
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	20 f3       	brcs	.-56     	; 0x16ce <check+0x16>
{
	EEPROM_readByte(0x0311+i, &(eepromread[i])); /* read the password form the external EEPROM */
	delay_timer0_normal_mode(1);
}
	for( i=0;i<4;i++)
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	18 c0       	rjmp	.+48     	; 0x173a <check+0x82>
	{
		if(eepromread[i] != check1[i]){
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 2f       	mov	r24, r24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	fc 01       	movw	r30, r24
    1712:	e4 58       	subi	r30, 0x84	; 132
    1714:	fe 4f       	sbci	r31, 0xFE	; 254
    1716:	20 81       	ld	r18, Z
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	fc 01       	movw	r30, r24
    1720:	ec 57       	subi	r30, 0x7C	; 124
    1722:	fe 4f       	sbci	r31, 0xFE	; 254
    1724:	80 81       	ld	r24, Z
    1726:	28 17       	cp	r18, r24
    1728:	29 f0       	breq	.+10     	; 0x1734 <check+0x7c>
			UART_sendByte(0);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <UART_sendByte>
			ok=0;
    1730:	10 92 75 01 	sts	0x0175, r1
	for(i=0;i<4;i++)
{
	EEPROM_readByte(0x0311+i, &(eepromread[i])); /* read the password form the external EEPROM */
	delay_timer0_normal_mode(1);
}
	for( i=0;i<4;i++)
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	28 f3       	brcs	.-54     	; 0x170a <check+0x52>
		if(eepromread[i] != check1[i]){
			UART_sendByte(0);
			ok=0;
		}
	}
UART_sendByte(1);
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <UART_sendByte>
ok=1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 75 01 	sts	0x0175, r24
}
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <main>:

int main(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	66 97       	sbiw	r28, 0x16	; 22
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
	/*initialization the uart:
	 * baudrate=9600
	 * diabled the parity
	 * one single stop bit
	 */
	SREG |= (1<<7);
    1768:	af e5       	ldi	r26, 0x5F	; 95
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ef e5       	ldi	r30, 0x5F	; 95
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 68       	ori	r24, 0x80	; 128
    1774:	8c 93       	st	X, r24
	usart_config ptr={9600,DISABLED,ONE,ASYNC,EIGHT};
    1776:	ce 01       	movw	r24, r28
    1778:	02 96       	adiw	r24, 0x02	; 2
    177a:	9e 87       	std	Y+14, r25	; 0x0e
    177c:	8d 87       	std	Y+13, r24	; 0x0d
    177e:	eb e6       	ldi	r30, 0x6B	; 107
    1780:	f1 e0       	ldi	r31, 0x01	; 1
    1782:	f8 8b       	std	Y+16, r31	; 0x10
    1784:	ef 87       	std	Y+15, r30	; 0x0f
    1786:	f8 e0       	ldi	r31, 0x08	; 8
    1788:	f9 8b       	std	Y+17, r31	; 0x11
    178a:	ef 85       	ldd	r30, Y+15	; 0x0f
    178c:	f8 89       	ldd	r31, Y+16	; 0x10
    178e:	00 80       	ld	r0, Z
    1790:	8f 85       	ldd	r24, Y+15	; 0x0f
    1792:	98 89       	ldd	r25, Y+16	; 0x10
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	98 8b       	std	Y+16, r25	; 0x10
    1798:	8f 87       	std	Y+15, r24	; 0x0f
    179a:	ed 85       	ldd	r30, Y+13	; 0x0d
    179c:	fe 85       	ldd	r31, Y+14	; 0x0e
    179e:	00 82       	st	Z, r0
    17a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	9e 87       	std	Y+14, r25	; 0x0e
    17a8:	8d 87       	std	Y+13, r24	; 0x0d
    17aa:	99 89       	ldd	r25, Y+17	; 0x11
    17ac:	91 50       	subi	r25, 0x01	; 1
    17ae:	99 8b       	std	Y+17, r25	; 0x11
    17b0:	e9 89       	ldd	r30, Y+17	; 0x11
    17b2:	ee 23       	and	r30, r30
    17b4:	51 f7       	brne	.-44     	; 0x178a <main+0x36>
	UART_init(&ptr);
    17b6:	ce 01       	movw	r24, r28
    17b8:	02 96       	adiw	r24, 0x02	; 2
    17ba:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <UART_init>
	/*initialization twi:
	 * slave address=1
	 * prescaler=1
	 * bit rate division factor=2
	 * */
	TWI_Config p={1,PRE_1,2};
    17be:	ce 01       	movw	r24, r28
    17c0:	0a 96       	adiw	r24, 0x0a	; 10
    17c2:	9b 8b       	std	Y+19, r25	; 0x13
    17c4:	8a 8b       	std	Y+18, r24	; 0x12
    17c6:	e8 e6       	ldi	r30, 0x68	; 104
    17c8:	f1 e0       	ldi	r31, 0x01	; 1
    17ca:	fd 8b       	std	Y+21, r31	; 0x15
    17cc:	ec 8b       	std	Y+20, r30	; 0x14
    17ce:	f3 e0       	ldi	r31, 0x03	; 3
    17d0:	fe 8b       	std	Y+22, r31	; 0x16
    17d2:	ec 89       	ldd	r30, Y+20	; 0x14
    17d4:	fd 89       	ldd	r31, Y+21	; 0x15
    17d6:	00 80       	ld	r0, Z
    17d8:	8c 89       	ldd	r24, Y+20	; 0x14
    17da:	9d 89       	ldd	r25, Y+21	; 0x15
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	9d 8b       	std	Y+21, r25	; 0x15
    17e0:	8c 8b       	std	Y+20, r24	; 0x14
    17e2:	ea 89       	ldd	r30, Y+18	; 0x12
    17e4:	fb 89       	ldd	r31, Y+19	; 0x13
    17e6:	00 82       	st	Z, r0
    17e8:	8a 89       	ldd	r24, Y+18	; 0x12
    17ea:	9b 89       	ldd	r25, Y+19	; 0x13
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	9b 8b       	std	Y+19, r25	; 0x13
    17f0:	8a 8b       	std	Y+18, r24	; 0x12
    17f2:	9e 89       	ldd	r25, Y+22	; 0x16
    17f4:	91 50       	subi	r25, 0x01	; 1
    17f6:	9e 8b       	std	Y+22, r25	; 0x16
    17f8:	ee 89       	ldd	r30, Y+22	; 0x16
    17fa:	ee 23       	and	r30, r30
    17fc:	51 f7       	brne	.-44     	; 0x17d2 <main+0x7e>
	TWI_init(&p);
    17fe:	ce 01       	movw	r24, r28
    1800:	0a 96       	adiw	r24, 0x0a	; 10
    1802:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <TWI_init>
	DcMotor_Init();
    1806:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <DcMotor_Init>
	buzzer_init();
    180a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <buzzer_init>
	while(1)
{
recieve_the_pass(eeprom);
    180e:	88 e7       	ldi	r24, 0x78	; 120
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	0e 94 02 0b 	call	0x1604	; 0x1604 <recieve_the_pass>
put_in_eeprom(eeprom);
    1816:	88 e7       	ldi	r24, 0x78	; 120
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	0e 94 2f 0b 	call	0x165e	; 0x165e <put_in_eeprom>
//recieve_the_pass(checkpass);
check();
    181e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <check>
uint8 button;
button=UART_recieveByte();
    1822:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <UART_recieveByte>
    1826:	89 83       	std	Y+1, r24	; 0x01

if(button==11)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	8b 30       	cpi	r24, 0x0B	; 11
    182c:	99 f5       	brne	.+102    	; 0x1894 <main+0x140>
{
	if(ok == 0)
    182e:	80 91 75 01 	lds	r24, 0x0175
    1832:	88 23       	and	r24, r24
    1834:	71 f4       	brne	.+28     	; 0x1852 <main+0xfe>
	{
		DcMotor_Rotate(Stop);
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <DcMotor_Rotate>
	buzzer_on();
    183c:	0e 94 c8 06 	call	0xd90	; 0xd90 <buzzer_on>
	delay_timer0_normal_mode(60);
    1840:	6c e3       	ldi	r22, 0x3C	; 60
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_timer0_normal_mode>
	buzzer_off();
    184c:	0e 94 d4 06 	call	0xda8	; 0xda8 <buzzer_off>
    1850:	de cf       	rjmp	.-68     	; 0x180e <main+0xba>
	}
    else
      {
ok=0;
    1852:	10 92 75 01 	sts	0x0175, r1
DcMotor_Rotate(Cw);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <DcMotor_Rotate>
delay_timer0_normal_mode(60);
    185c:	6c e3       	ldi	r22, 0x3C	; 60
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_timer0_normal_mode>
DcMotor_Rotate(Stop);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <DcMotor_Rotate>
delay_timer0_normal_mode(8);
    186e:	68 e0       	ldi	r22, 0x08	; 8
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_timer0_normal_mode>
DcMotor_Rotate(A_Cw);
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <DcMotor_Rotate>
delay_timer0_normal_mode(60);
    1880:	6c e3       	ldi	r22, 0x3C	; 60
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_timer0_normal_mode>
DcMotor_Rotate(Stop);
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <DcMotor_Rotate>
    1892:	bd cf       	rjmp	.-134    	; 0x180e <main+0xba>
     }

}
else
{
	if(ok == 0)
    1894:	80 91 75 01 	lds	r24, 0x0175
    1898:	88 23       	and	r24, r24
    189a:	09 f0       	breq	.+2      	; 0x189e <main+0x14a>
    189c:	b8 cf       	rjmp	.-144    	; 0x180e <main+0xba>
		{
		buzzer_on();
    189e:	0e 94 c8 06 	call	0xd90	; 0xd90 <buzzer_on>
		delay_timer0_normal_mode(240);
    18a2:	60 ef       	ldi	r22, 0xF0	; 240
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_timer0_normal_mode>
		buzzer_off();
    18ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <buzzer_off>
    18b2:	ad cf       	rjmp	.-166    	; 0x180e <main+0xba>

000018b4 <DcMotor_Init>:
#include "gpio.h"
#include "std_types.h"
#include "avr/io.h"

void DcMotor_Init(void)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	63 e0       	ldi	r22, 0x03	; 3
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
GPIO_setupPinDirection(PORTB_ID, PIN0_ID, PIN_OUTPUT);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
GPIO_setupPinDirection(PORTB_ID, PIN1_ID, PIN_OUTPUT);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>

}
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	89 83       	std	Y+1, r24	; 0x01
PORTB=((PORTB & 0xFC)| state);
    1900:	a8 e3       	ldi	r26, 0x38	; 56
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e8 e3       	ldi	r30, 0x38	; 56
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	98 2f       	mov	r25, r24
    190c:	9c 7f       	andi	r25, 0xFC	; 252
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	89 2b       	or	r24, r25
    1912:	8c 93       	st	X, r24
GPIO_writePin(PORTB_ID, PIN3_ID, LOGIC_HIGH);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	63 e0       	ldi	r22, 0x03	; 3
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
}
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <PWM_Timer0_Start>:
 *      Author: Kirollos Gerges
 */
#include<avr/io.h>
#include"pwm.h"
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <PWM_Timer0_Start+0x6>
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	8a 83       	std	Y+2, r24	; 0x02

	TCNT0 = 0; //Set Timer Initial value
    1932:	e2 e5       	ldi	r30, 0x52	; 82
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	10 82       	st	Z, r1

	uint8 speed = (((float)duty_cycle/100)*255);
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	48 ec       	ldi	r20, 0xC8	; 200
    1958:	52 e4       	ldi	r21, 0x42	; 66
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	53 e4       	ldi	r21, 0x43	; 67
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	89 83       	std	Y+1, r24	; 0x01

	OCR0  = speed; // Set Compare Value
    1984:	ec e5       	ldi	r30, 0x5C	; 92
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    198c:	a7 e3       	ldi	r26, 0x37	; 55
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e7 e3       	ldi	r30, 0x37	; 55
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	88 60       	ori	r24, 0x08	; 8
    1998:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    199a:	e3 e5       	ldi	r30, 0x53	; 83
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8a e6       	ldi	r24, 0x6A	; 106
    19a0:	80 83       	st	Z, r24
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <DeInit>:

/*
 * DESCRIPTION: the function is to stop the timer
 */
void  DeInit(void)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62

	TCCR0 = 0;
    19b4:	e3 e5       	ldi	r30, 0x53	; 83
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	10 82       	st	Z, r1
}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <Timer0_init>:

/*
 * function that initialize the timer
 */
void  Timer0_init(const const config * ptr)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <Timer0_init+0x6>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
	SREG |=(1<<7);
    19ce:	af e5       	ldi	r26, 0x5F	; 95
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ef e5       	ldi	r30, 0x5F	; 95
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	80 68       	ori	r24, 0x80	; 128
    19da:	8c 93       	st	X, r24
	TCNT0=0;  // intialize the timer
    19dc:	e2 e5       	ldi	r30, 0x52	; 82
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	10 82       	st	Z, r1
	TCCR0|=(1<<FOC0);
    19e2:	a3 e5       	ldi	r26, 0x53	; 83
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e3 e5       	ldi	r30, 0x53	; 83
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 68       	ori	r24, 0x80	; 128
    19ee:	8c 93       	st	X, r24
	if(ptr->MODE==COMPARE)
    19f0:	e9 81       	ldd	r30, Y+1	; 0x01
    19f2:	fa 81       	ldd	r31, Y+2	; 0x02
    19f4:	81 81       	ldd	r24, Z+1	; 0x01
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	d1 f4       	brne	.+52     	; 0x1a2e <Timer0_init+0x6e>
	{
		OCR0  = ptr->OCROO; // Set Compare Value
    19fa:	ac e5       	ldi	r26, 0x5C	; 92
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	80 81       	ld	r24, Z
    1a04:	8c 93       	st	X, r24
		TCCR0 |=(1<<WGM01);
    1a06:	a3 e5       	ldi	r26, 0x53	; 83
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e3 e5       	ldi	r30, 0x53	; 83
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 60       	ori	r24, 0x08	; 8
    1a12:	8c 93       	st	X, r24
		if (ptr->TYPE == INTERRUPT)
    1a14:	e9 81       	ldd	r30, Y+1	; 0x01
    1a16:	fa 81       	ldd	r31, Y+2	; 0x02
    1a18:	83 81       	ldd	r24, Z+3	; 0x03
    1a1a:	88 23       	and	r24, r24
    1a1c:	c9 f4       	brne	.+50     	; 0x1a50 <Timer0_init+0x90>
		{

			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    1a1e:	a9 e5       	ldi	r26, 0x59	; 89
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e9 e5       	ldi	r30, 0x59	; 89
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	82 60       	ori	r24, 0x02	; 2
    1a2a:	8c 93       	st	X, r24
    1a2c:	11 c0       	rjmp	.+34     	; 0x1a50 <Timer0_init+0x90>
		}

	}

	else if((ptr->MODE==OVER) && (ptr->TYPE == INTERRUPT))
    1a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a30:	fa 81       	ldd	r31, Y+2	; 0x02
    1a32:	81 81       	ldd	r24, Z+1	; 0x01
    1a34:	88 23       	and	r24, r24
    1a36:	61 f4       	brne	.+24     	; 0x1a50 <Timer0_init+0x90>
    1a38:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3c:	83 81       	ldd	r24, Z+3	; 0x03
    1a3e:	88 23       	and	r24, r24
    1a40:	39 f4       	brne	.+14     	; 0x1a50 <Timer0_init+0x90>
	{



		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    1a42:	a9 e5       	ldi	r26, 0x59	; 89
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e9 e5       	ldi	r30, 0x59	; 89
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 60       	ori	r24, 0x01	; 1
    1a4e:	8c 93       	st	X, r24

	}
	TCCR0 = (TCCR0&0xf8)|(ptr->PRESCALER);//setting the prescaler
    1a50:	a3 e5       	ldi	r26, 0x53	; 83
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e3 e5       	ldi	r30, 0x53	; 83
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	98 2f       	mov	r25, r24
    1a5c:	98 7f       	andi	r25, 0xF8	; 248
    1a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a60:	fa 81       	ldd	r31, Y+2	; 0x02
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	89 2b       	or	r24, r25
    1a66:	8c 93       	st	X, r24


	if (ptr->TYPE == POLLING)
    1a68:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6c:	83 81       	ldd	r24, Z+3	; 0x03
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	f9 f4       	brne	.+62     	; 0x1ab0 <Timer0_init+0xf0>
	{
		if(ptr->MODE==OVER)
    1a72:	e9 81       	ldd	r30, Y+1	; 0x01
    1a74:	fa 81       	ldd	r31, Y+2	; 0x02
    1a76:	81 81       	ldd	r24, Z+1	; 0x01
    1a78:	88 23       	and	r24, r24
    1a7a:	51 f4       	brne	.+20     	; 0x1a90 <Timer0_init+0xd0>
		{
			while(!(TIFR & (1<<TOV0))); // Wait until the FLAG
    1a7c:	e8 e5       	ldi	r30, 0x58	; 88
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	81 70       	andi	r24, 0x01	; 1
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	b9 f3       	breq	.-18     	; 0x1a7c <Timer0_init+0xbc>
    1a8e:	0e c0       	rjmp	.+28     	; 0x1aac <Timer0_init+0xec>
		}
		else if (ptr->MODE==COMPARE)
    1a90:	e9 81       	ldd	r30, Y+1	; 0x01
    1a92:	fa 81       	ldd	r31, Y+2	; 0x02
    1a94:	81 81       	ldd	r24, Z+1	; 0x01
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	49 f4       	brne	.+18     	; 0x1aac <Timer0_init+0xec>
		{
			while(!(TIFR & (1<<OCF0))); // Wait until the FLAG
    1a9a:	e8 e5       	ldi	r30, 0x58	; 88
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	82 70       	andi	r24, 0x02	; 2
    1aa6:	90 70       	andi	r25, 0x00	; 0
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	b9 f3       	breq	.-18     	; 0x1a9a <Timer0_init+0xda>
		}
		DeInit();
    1aac:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <DeInit>
	}




}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <__vector_9>:
/****************************************************
 * the normal mode isr
 * ******************/
ISR(TIMER0_OVF_vect)
{
    1aba:	1f 92       	push	r1
    1abc:	0f 92       	push	r0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	2f 93       	push	r18
    1ac6:	3f 93       	push	r19
    1ac8:	4f 93       	push	r20
    1aca:	5f 93       	push	r21
    1acc:	6f 93       	push	r22
    1ace:	7f 93       	push	r23
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	af 93       	push	r26
    1ad6:	bf 93       	push	r27
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1ae4:	80 91 76 01 	lds	r24, 0x0176
    1ae8:	90 91 77 01 	lds	r25, 0x0177
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	29 f0       	breq	.+10     	; 0x1afa <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1af0:	e0 91 76 01 	lds	r30, 0x0176
    1af4:	f0 91 77 01 	lds	r31, 0x0177
    1af8:	09 95       	icall
	}
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	ff 91       	pop	r31
    1b00:	ef 91       	pop	r30
    1b02:	bf 91       	pop	r27
    1b04:	af 91       	pop	r26
    1b06:	9f 91       	pop	r25
    1b08:	8f 91       	pop	r24
    1b0a:	7f 91       	pop	r23
    1b0c:	6f 91       	pop	r22
    1b0e:	5f 91       	pop	r21
    1b10:	4f 91       	pop	r20
    1b12:	3f 91       	pop	r19
    1b14:	2f 91       	pop	r18
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	0f 90       	pop	r0
    1b1c:	1f 90       	pop	r1
    1b1e:	18 95       	reti

00001b20 <__vector_19>:
/*
 * ISR in Compare mood
 */

ISR(TIMER0_COMP_vect)
{
    1b20:	1f 92       	push	r1
    1b22:	0f 92       	push	r0
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	0f 92       	push	r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b4a:	80 91 76 01 	lds	r24, 0x0176
    1b4e:	90 91 77 01 	lds	r25, 0x0177
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	29 f0       	breq	.+10     	; 0x1b60 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b56:	e0 91 76 01 	lds	r30, 0x0176
    1b5a:	f0 91 77 01 	lds	r31, 0x0177
    1b5e:	09 95       	icall
	}
}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	ff 91       	pop	r31
    1b66:	ef 91       	pop	r30
    1b68:	bf 91       	pop	r27
    1b6a:	af 91       	pop	r26
    1b6c:	9f 91       	pop	r25
    1b6e:	8f 91       	pop	r24
    1b70:	7f 91       	pop	r23
    1b72:	6f 91       	pop	r22
    1b74:	5f 91       	pop	r21
    1b76:	4f 91       	pop	r20
    1b78:	3f 91       	pop	r19
    1b7a:	2f 91       	pop	r18
    1b7c:	0f 90       	pop	r0
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	0f 90       	pop	r0
    1b82:	1f 90       	pop	r1
    1b84:	18 95       	reti

00001b86 <SetCallBack>:

/*
 * setting call back function
 */
void SetCallBack(void(*a_ptr)(void))
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <SetCallBack+0x6>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	90 93 77 01 	sts	0x0177, r25
    1b9c:	80 93 76 01 	sts	0x0176, r24
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_Config *Config_Ptr)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <TWI_init+0x6>
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	89 83       	std	Y+1, r24	; 0x01

	TWBR = Config_Ptr -> bit_rate_devision_factor;
    1bb8:	a0 e2       	ldi	r26, 0x20	; 32
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	8c 93       	st	X, r24
	TWSR = Config_Ptr -> bit_rate_prescalar;
    1bc4:	a1 e2       	ldi	r26, 0x21	; 33
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	81 81       	ldd	r24, Z+1	; 0x01
    1bce:	8c 93       	st	X, r24

	    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	       General Call Recognition: Off */
	TWAR = Config_Ptr -> slave_address;
    1bd0:	a2 e2       	ldi	r26, 0x22	; 34
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd8:	80 81       	ld	r24, Z
    1bda:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    1bdc:	e6 e5       	ldi	r30, 0x56	; 86
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	84 e0       	ldi	r24, 0x04	; 4
    1be2:	80 83       	st	Z, r24
}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <TWI_start>:

void TWI_start(void)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1bf6:	e6 e5       	ldi	r30, 0x56	; 86
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	84 ea       	ldi	r24, 0xA4	; 164
    1bfc:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1bfe:	e6 e5       	ldi	r30, 0x56	; 86
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	88 23       	and	r24, r24
    1c06:	dc f7       	brge	.-10     	; 0x1bfe <TWI_start+0x10>
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <TWI_stop>:

void TWI_stop(void)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1c16:	e6 e5       	ldi	r30, 0x56	; 86
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	84 e9       	ldi	r24, 0x94	; 148
    1c1c:	80 83       	st	Z, r24
}
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	0f 92       	push	r0
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1c30:	e3 e2       	ldi	r30, 0x23	; 35
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1c38:	e6 e5       	ldi	r30, 0x56	; 86
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	84 e8       	ldi	r24, 0x84	; 132
    1c3e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c40:	e6 e5       	ldi	r30, 0x56	; 86
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	88 23       	and	r24, r24
    1c48:	dc f7       	brge	.-10     	; 0x1c40 <TWI_writeByte+0x1c>
}
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1c5a:	e6 e5       	ldi	r30, 0x56	; 86
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	84 ec       	ldi	r24, 0xC4	; 196
    1c60:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c62:	e6 e5       	ldi	r30, 0x56	; 86
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 23       	and	r24, r24
    1c6a:	dc f7       	brge	.-10     	; 0x1c62 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1c6c:	e3 e2       	ldi	r30, 0x23	; 35
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1c80:	e6 e5       	ldi	r30, 0x56	; 86
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	84 e8       	ldi	r24, 0x84	; 132
    1c86:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c88:	e6 e5       	ldi	r30, 0x56	; 86
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 23       	and	r24, r24
    1c90:	dc f7       	brge	.-10     	; 0x1c88 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1c92:	e3 e2       	ldi	r30, 0x23	; 35
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1ca8:	e1 e2       	ldi	r30, 0x21	; 33
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	88 7f       	andi	r24, 0xF8	; 248
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb4:	0f 90       	pop	r0
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const usart_config * Config_Ptr)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <UART_init+0x6>
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <UART_init+0x8>
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	9c 83       	std	Y+4, r25	; 0x04
    1cca:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1ccc:	1a 82       	std	Y+2, r1	; 0x02
    1cce:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1cd0:	eb e2       	ldi	r30, 0x2B	; 43
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1cd8:	ea e2       	ldi	r30, 0x2A	; 42
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	88 e1       	ldi	r24, 0x18	; 24
    1cde:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1)|((Config_Ptr-> u_mode)<<UMSEL)|((Config_Ptr-> s_sel)<<USBS)|((Config_Ptr-> ch_size)<<1)|((Config_Ptr-> p_mode)<<4);
    1ce0:	a0 e4       	ldi	r26, 0x40	; 64
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce8:	86 81       	ldd	r24, Z+6	; 0x06
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	00 24       	eor	r0, r0
    1cf0:	96 95       	lsr	r25
    1cf2:	87 95       	ror	r24
    1cf4:	07 94       	ror	r0
    1cf6:	96 95       	lsr	r25
    1cf8:	87 95       	ror	r24
    1cfa:	07 94       	ror	r0
    1cfc:	98 2f       	mov	r25, r24
    1cfe:	80 2d       	mov	r24, r0
    1d00:	28 2f       	mov	r18, r24
    1d02:	26 68       	ori	r18, 0x86	; 134
    1d04:	eb 81       	ldd	r30, Y+3	; 0x03
    1d06:	fc 81       	ldd	r31, Y+4	; 0x04
    1d08:	85 81       	ldd	r24, Z+5	; 0x05
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	28 2b       	or	r18, r24
    1d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d20:	87 81       	ldd	r24, Z+7	; 0x07
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	28 2b       	or	r18, r24
    1d2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d30:	84 81       	ldd	r24, Z+4	; 0x04
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	82 95       	swap	r24
    1d38:	92 95       	swap	r25
    1d3a:	90 7f       	andi	r25, 0xF0	; 240
    1d3c:	98 27       	eor	r25, r24
    1d3e:	80 7f       	andi	r24, 0xF0	; 240
    1d40:	98 27       	eor	r25, r24
    1d42:	82 2b       	or	r24, r18
    1d44:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baudrate) * 8UL))) - 1);
    1d46:	eb 81       	ldd	r30, Y+3	; 0x03
    1d48:	fc 81       	ldd	r31, Y+4	; 0x04
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	a2 81       	ldd	r26, Z+2	; 0x02
    1d50:	b3 81       	ldd	r27, Z+3	; 0x03
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	aa 1f       	adc	r26, r26
    1d58:	bb 1f       	adc	r27, r27
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	aa 1f       	adc	r26, r26
    1d60:	bb 1f       	adc	r27, r27
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	aa 1f       	adc	r26, r26
    1d68:	bb 1f       	adc	r27, r27
    1d6a:	9c 01       	movw	r18, r24
    1d6c:	ad 01       	movw	r20, r26
    1d6e:	80 e4       	ldi	r24, 0x40	; 64
    1d70:	92 e4       	ldi	r25, 0x42	; 66
    1d72:	af e0       	ldi	r26, 0x0F	; 15
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
    1d7e:	da 01       	movw	r26, r20
    1d80:	c9 01       	movw	r24, r18
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1d88:	e0 e4       	ldi	r30, 0x40	; 64
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	89 2f       	mov	r24, r25
    1d92:	99 27       	eor	r25, r25
    1d94:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1d96:	e9 e2       	ldi	r30, 0x29	; 41
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	80 83       	st	Z, r24
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	0f 92       	push	r0
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1db8:	eb e2       	ldi	r30, 0x2B	; 43
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	80 72       	andi	r24, 0x20	; 32
    1dc4:	90 70       	andi	r25, 0x00	; 0
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	b9 f3       	breq	.-18     	; 0x1db8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1dca:	ec e2       	ldi	r30, 0x2C	; 44
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1de2:	eb e2       	ldi	r30, 0x2B	; 43
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	88 23       	and	r24, r24
    1dea:	dc f7       	brge	.-10     	; 0x1de2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1dec:	ec e2       	ldi	r30, 0x2C	; 44
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <UART_sendString+0x6>
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	9b 83       	std	Y+3, r25	; 0x03
    1e06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e08:	19 82       	std	Y+1, r1	; 0x01
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	fc 01       	movw	r30, r24
    1e18:	e2 0f       	add	r30, r18
    1e1a:	f3 1f       	adc	r31, r19
    1e1c:	80 81       	ld	r24, Z
    1e1e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <UART_sendByte>
		i++;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 23       	and	r24, r24
    1e3c:	39 f7       	brne	.-50     	; 0x1e0c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <UART_receiveString+0xa>
    1e54:	0f 92       	push	r0
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	9b 83       	std	Y+3, r25	; 0x03
    1e5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e5e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	8c 01       	movw	r16, r24
    1e6c:	02 0f       	add	r16, r18
    1e6e:	13 1f       	adc	r17, r19
    1e70:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <UART_recieveByte>
    1e74:	f8 01       	movw	r30, r16
    1e76:	80 83       	st	Z, r24
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	8c 01       	movw	r16, r24
    1e8c:	02 0f       	add	r16, r18
    1e8e:	13 1f       	adc	r17, r19
    1e90:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <UART_recieveByte>
    1e94:	f8 01       	movw	r30, r16
    1e96:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	e2 0f       	add	r30, r18
    1ea6:	f3 1f       	adc	r31, r19
    1ea8:	80 81       	ld	r24, Z
    1eaa:	83 32       	cpi	r24, 0x23	; 35
    1eac:	31 f7       	brne	.-52     	; 0x1e7a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	fc 01       	movw	r30, r24
    1eba:	e2 0f       	add	r30, r18
    1ebc:	f3 1f       	adc	r31, r19
    1ebe:	10 82       	st	Z, r1
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	08 95       	ret

00001ed0 <__udivmodsi4>:
    1ed0:	a1 e2       	ldi	r26, 0x21	; 33
    1ed2:	1a 2e       	mov	r1, r26
    1ed4:	aa 1b       	sub	r26, r26
    1ed6:	bb 1b       	sub	r27, r27
    1ed8:	fd 01       	movw	r30, r26
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <__udivmodsi4_ep>

00001edc <__udivmodsi4_loop>:
    1edc:	aa 1f       	adc	r26, r26
    1ede:	bb 1f       	adc	r27, r27
    1ee0:	ee 1f       	adc	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	a2 17       	cp	r26, r18
    1ee6:	b3 07       	cpc	r27, r19
    1ee8:	e4 07       	cpc	r30, r20
    1eea:	f5 07       	cpc	r31, r21
    1eec:	20 f0       	brcs	.+8      	; 0x1ef6 <__udivmodsi4_ep>
    1eee:	a2 1b       	sub	r26, r18
    1ef0:	b3 0b       	sbc	r27, r19
    1ef2:	e4 0b       	sbc	r30, r20
    1ef4:	f5 0b       	sbc	r31, r21

00001ef6 <__udivmodsi4_ep>:
    1ef6:	66 1f       	adc	r22, r22
    1ef8:	77 1f       	adc	r23, r23
    1efa:	88 1f       	adc	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	1a 94       	dec	r1
    1f00:	69 f7       	brne	.-38     	; 0x1edc <__udivmodsi4_loop>
    1f02:	60 95       	com	r22
    1f04:	70 95       	com	r23
    1f06:	80 95       	com	r24
    1f08:	90 95       	com	r25
    1f0a:	9b 01       	movw	r18, r22
    1f0c:	ac 01       	movw	r20, r24
    1f0e:	bd 01       	movw	r22, r26
    1f10:	cf 01       	movw	r24, r30
    1f12:	08 95       	ret

00001f14 <__prologue_saves__>:
    1f14:	2f 92       	push	r2
    1f16:	3f 92       	push	r3
    1f18:	4f 92       	push	r4
    1f1a:	5f 92       	push	r5
    1f1c:	6f 92       	push	r6
    1f1e:	7f 92       	push	r7
    1f20:	8f 92       	push	r8
    1f22:	9f 92       	push	r9
    1f24:	af 92       	push	r10
    1f26:	bf 92       	push	r11
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	ca 1b       	sub	r28, r26
    1f3e:	db 0b       	sbc	r29, r27
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	09 94       	ijmp

00001f4c <__epilogue_restores__>:
    1f4c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f4e:	39 88       	ldd	r3, Y+17	; 0x11
    1f50:	48 88       	ldd	r4, Y+16	; 0x10
    1f52:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f54:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f56:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f58:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f5e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f60:	c8 84       	ldd	r12, Y+8	; 0x08
    1f62:	df 80       	ldd	r13, Y+7	; 0x07
    1f64:	ee 80       	ldd	r14, Y+6	; 0x06
    1f66:	fd 80       	ldd	r15, Y+5	; 0x05
    1f68:	0c 81       	ldd	r16, Y+4	; 0x04
    1f6a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f6c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f6e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f70:	ce 0f       	add	r28, r30
    1f72:	d1 1d       	adc	r29, r1
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	ed 01       	movw	r28, r26
    1f80:	08 95       	ret

00001f82 <_exit>:
    1f82:	f8 94       	cli

00001f84 <__stop_program>:
    1f84:	ff cf       	rjmp	.-2      	; 0x1f84 <__stop_program>
